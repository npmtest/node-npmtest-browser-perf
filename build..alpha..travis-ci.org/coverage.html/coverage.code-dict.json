{"/home/travis/build/npmtest/node-npmtest-browser-perf/test.js":"/* istanbul instrument in package npmtest_browser_perf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-perf/lib.npmtest_browser_perf.js":"/* istanbul instrument in package npmtest_browser_perf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browser_perf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browser_perf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-perf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browser-perf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browser_perf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browser_perf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browser_perf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browser_perf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browser_perf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browser_perf.__dirname + '/lib.npmtest_browser_perf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/index.js":"var Q = require('q'),\n\twd = require('wd'),\n\tActions = require('./actions'),\n\tMetrics = require('./metrics'),\n\thelpers = require('./helpers');\n\nvar debug = require('debug'),\n\tlog = debug('bp:index'),\n\tseleniumLog = debug('bp:selenium');\n\nfunction main(url, cb, cfg) {\n\tvar opts = require('./options').scrub(cfg),\n\t\terrors = [],\n\t\tresults = [];\n\tvar res = [],\n\t\terr = [];\n\topts.browsers.map(function(browserConfig) {\n\t\treturn function() {\n\t\t\treturn runOnBrowser(url, browserConfig, opts).then(function(data) {\n\t\t\t\tdata._browserName = browserConfig.browserName;\n\t\t\t\tdata._url = url;\n\t\t\t\tres.push(data);\n\t\t\t}, function(error) {\n\t\t\t\tif (typeof error === \"object\" && error.code === 'ECONNREFUSED') {\n\t\t\t\t\terror.errno = 'GRID_CONFIG_ERROR';\n\t\t\t\t}\n\t\t\t\terr.push(error);\n\t\t\t});\n\t\t}\n\t}).reduce(Q.when, Q()).then(function() {\n\t\tcb(err.length === 0 ? undefined : err, res);\n\t}, function(err) {\n\t\tcb(err);\n\t}).done();\n}\n\n\nfunction runOnBrowser(url, browserConfig, opts) {\n\tbrowser = wd.promiseRemote(opts.selenium);\n\tlog('Selenium is on %s', browser.noAuthConfigUrl.hostname);\n\tbrowser.on('status', function(data) {\n\t\t//seleniumLog(data);\n\t});\n\tbrowser.on('command', function(meth, path, data) {\n\t\tif (data && typeof data === 'object') {\n\t\t\tvar data = JSON.stringify(data);\n\t\t}\n\t\tseleniumLog(meth, (path || '').substr(0, 70), (data || '').substr(0, 70));\n\t});\n\n\tvar metrics = new Metrics(opts.metrics);\n\tvar actions = new Actions(opts.actions);\n\n\treturn metrics.setup(opts).then(function() {\n\t\treturn actions.setup(opts);\n\t}).then(function() {\n\t\tlog('Stating browser with', JSON.stringify(browserConfig));\n\t\treturn browser.init(browserConfig);\n\t}).then(function() {\n\t\tlog('Session is ' + browser.sessionID);\n\t\tlog('Running Prescript');\n\t\treturn opts.preScript(browser);\n\t}).then(function() {\n\t\tif (url) {\n\t\t\treturn browser.get(url);\n\t\t}\n\t}).then(function() {\n\t\treturn metrics.start(browser, browserConfig);\n\t}).then(function() {\n\t\treturn actions.perform(browser, browserConfig);\n\t}).then(function() {\n\t\treturn metrics.teardown(browser, browserConfig);\n\t}).then(function() {\n\t\treturn metrics.getResults();\n\t}).fin(function() {\n\t\tif (!opts.debugBrowser) {\n\t\t\treturn browser.quit().catch(function() {\n\t\t\t\treturn Q();\n\t\t\t});\n\t\t}\n\t});\n}\n\nmodule.exports = main;\nmodule.exports.actions = Actions.actions;\nmodule.exports.runner = require('./runner');\nmodule.exports.docs = require('../docs');","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/actions/index.js":"var Q = require('q');\r\n\r\nvar builtInActions = {\r\n\tscroll: require('./scrollAction.js'),\r\n\tlogin: require('./loginAction.js'),\r\n\twait: require('./wait.js')\r\n};\r\n\r\nvar Actions = function(actionList) {\r\n\tvar emptyAction = function() {\r\n\t\treturn Q();\r\n\t};\r\n\tthis.actionList = actionList.map(function(action) {\r\n\t\tif (typeof action === 'string' && builtInActions[action] !== 'undefined') {\r\n\t\t\treturn builtInActions[action]();\r\n\t\t} else if (typeof action === 'function') {\r\n\t\t\treturn action;\r\n\t\t} else {\r\n\t\t\tthrow 'Could not find action ' + action;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nActions.prototype.forEachAction_ = function(cb) {\r\n\treturn this.actionList.map(function(action) {\r\n\t\treturn function() {\r\n\t\t\treturn cb(action);\r\n\t\t}\r\n\t}).reduce(Q.when, Q());\r\n};\r\n\r\nActions.prototype.setup = function(cfg) {\r\n\treturn this.forEachAction_(function(action) {\r\n\t\tif (typeof action.setup === 'function') {\r\n\t\t\treturn action.setup(cfg);\r\n\t\t} else {\r\n\t\t\treturn Q();\r\n\t\t}\r\n\t});\r\n};\r\n\r\nActions.prototype.perform = function(browser) {\r\n\treturn this.forEachAction_(function(action) {\r\n\t\treturn action(browser);\r\n\t});\r\n};\r\n\r\nmodule.exports = Actions;\r\nmodule.exports.actions = builtInActions;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/actions/scrollAction.js":"/**\r\n\r\n\tcfg - <object> options for scrolling. Properties of cfg can be\r\n\t\r\n\tdirection <string>: up|down|left|right (default: down)\r\n\tscrollElement <string>: Javascript code evaluated in browser to pick element to scroll (default: document.body)\r\n\tspeed <number>: scroll speed (default: 800)\r\n\tpollFreq <number>: frequency at which polling should be done to check if scroll is complete (default: 200)\r\n\r\n\tTo scroll a custom element, look at the wiki\r\n\r\n*/\r\nvar fs = require('fs'),\r\n\twd = require('wd'),\r\n\tQ = require('q'),\r\n\tdebug = require('debug')('bp:actions:scroll'),\r\n\tjsmin = require('jsmin').jsmin,\r\n\thelpers = require('../helpers');\r\n\r\nmodule.exports = function(cfg) {\r\n\tcfg = cfg || {};\r\n\r\n\tfunction scroll(browser) {\r\n\r\n\t\tvar raf_scroll = jsmin(fs.readFileSync(__dirname + '/page_scripts/raf_scroll.js', 'utf-8')),\r\n\t\t\tchrome_scroll = jsmin(fs.readFileSync(__dirname + '/page_scripts/chrome_scroll.js', 'utf-8')),\r\n\t\t\tgesture_common = jsmin(fs.readFileSync(__dirname + '/page_scripts/gesture_common.js', 'utf-8'));\r\n\r\n\t\tvar runner = function(opts) {\r\n\t\t\tconsole.log(\"Scrolling with \", opts);\r\n\t\t\twindow.__scrollActionDone = false;\r\n\t\t\twindow.__scrollAction = new __ScrollAction(function() {\r\n\t\t\t\twindow.__scrollActionDone = true;\r\n\t\t\t});\r\n\t\t\twindow.__scrollAction.start({\r\n\t\t\t\telement: eval(opts.el),\r\n\t\t\t\tleft_start_percentage: opts.left_start_percentage,\r\n\t\t\t\ttop_start_percentage: opts.top_start_percentage,\r\n\t\t\t\tdirection: opts.direction,\r\n\t\t\t\tspeed: opts.speed,\r\n\t\t\t\tgesture_source_type: opts.gesture_source_type\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tdebug('Initializing Scroll function');\r\n\t\treturn browser.execute(gesture_common + chrome_scroll + raf_scroll + helpers.fnCall(runner, {\r\n\t\t\tleft_start_percentage: 0.5,\r\n\t\t\ttop_start_percentage: 0.5,\r\n\t\t\tdirection: cfg.direction || 'down',\r\n\t\t\tspeed: cfg.speed || 800,\r\n\t\t\tgesture_source_type: 0,\r\n\t\t\tel: cfg.scrollElement || 'document.body'\r\n\t\t})).then(function() {\r\n\t\t\tdebug('Waiting for Scrolling to finish');\r\n\t\t\treturn browser.waitFor({\r\n\t\t\t\tasserter: wd.asserters.jsCondition('(window.__scrollActionDone === true)', false),\r\n\t\t\t\ttimeout: 1000 * 60 * 10,\r\n\t\t\t\tpollFreq: cfg.pollFreq || 2000\r\n\t\t\t});\r\n\t\t})\r\n\t};\r\n\r\n\tscroll.setup = function(cfg) {\r\n\t\tcfg.browsers = cfg.browsers.map(function(browser) {\r\n\t\t\tif (browser.browserName && (browser.browserName.match(/android/i) || browser.browserName.match(/chrome/i))) {\r\n\t\t\t\thelpers.extend(browser, {\r\n\t\t\t\t\tchromeOptions: {\r\n\t\t\t\t\t\targs: ['--enable-gpu-benchmarking', '--enable-thread-composting']\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn browser;\r\n\t\t});\r\n\t\treturn Q(cfg);\r\n\t};\r\n\r\n\treturn scroll;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/helpers.js":"var extend = function(obj1, obj2) {\r\n\tif (typeof obj1 !== 'object' && !obj1) {\r\n\t\tobj1 = {};\r\n\t}\r\n\tif (typeof obj2 !== 'object' && !obj2) {\r\n\t\tobj2 = {};\r\n\t}\r\n\tfor (var key in obj2) {\r\n\t\tif (Array.isArray(obj1[key]) && Array.isArray(obj2[key])) {\r\n\t\t\tobj1[key] = obj1[key].concat(obj2[key]);\r\n\t\t} else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object' && !Array.isArray(obj1[key]) && !Array.isArray(obj2[key])) {\r\n\t\t\tobj1[key] = extend(obj1[key], obj2[key]);\r\n\t\t} else {\r\n\t\t\tobj1[key] = obj2[key];\r\n\t\t}\r\n\t}\r\n\treturn obj1;\r\n}\r\n\r\nvar deepEquals = function(global, prop, val) {\r\n\tvar props = prop.split('.');\r\n\tfor (var i = 0; i < props.length; i++) {\r\n\t\tif (typeof global !== 'object' || global === null){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof global[props[i]] === 'undefined') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tglobal = global[props[i]];\r\n\t}\r\n\treturn global === val;\r\n};\r\n\r\nvar metrics = function(value, category, source, unit, importance, tags) {\r\n\treturn {\r\n\t\tvalue: value,\r\n\t\tunit: unit || 'ms',\r\n\t\tcategory: category,\r\n\t\tsource: source,\r\n\t\ttags: tags || [],\r\n\t\timportance: importance || 0\r\n\t}\r\n}\r\n\r\nmetrics.format = function(metric) {\r\n\tvar res = [metric.value, metric.unit];\r\n\treturn res.join(' ');\r\n};\r\n\r\nmetrics.log = function(m) {\r\n\tvar res = {};\r\n\tfor (var key in m) {\r\n\t\tres[key] = metrics.format(m[key]);\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nvar jsmin = require('jsmin').jsmin;\r\n\r\nmodule.exports = {\r\n\tfnCall: function(fn, args) {\r\n\t\targs = args || '';\r\n\t\tif (typeof args === 'object') {\r\n\t\t\targs = JSON.stringify(args);\r\n\t\t}\r\n\t\treturn '(' + jsmin(fn.toString()) + '(' + args + '));';\r\n\t},\r\n\tmetrics: metrics,\r\n\textend: extend,\r\n\tdeepEquals: deepEquals\r\n};","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/actions/loginAction.js":"module.exports = function(cfg) {\r\n\tcfg = cfg || {};\r\n\tdebug = require('debug')('bp:actions:login');\r\n\treturn function(browser) {\r\n\t\tdebug('Loading login form');\r\n\t\treturn browser.get(cfg.page).then(function() {\r\n\t\t\tdebug('Filling in Username');\r\n\t\t\treturn browser.elementByCssSelector(cfg.username.field)\r\n\t\t}).then(function(el) {\r\n\t\t\treturn el.type(cfg.username.val || cfg.username.value);\r\n\t\t}).then(function() {\r\n\t\t\tdebug('Filling in Password');\r\n\t\t\treturn browser.elementByCssSelector(cfg.password.field);\r\n\t\t}).then(function(el) {\r\n\t\t\treturn el.type(cfg.password.val || cfg.password.value);\r\n\t\t}).then(function() {\r\n\t\t\treturn browser.elementByCssSelector(cfg.submit.field);\r\n\t\t}).then(function(el) {\r\n\t\t\tdebug('Clicking submit');\r\n\t\t\treturn el.click();\r\n\t\t}).then(function() {\r\n\t\t\treturn browser.sleep(5000);\r\n\t\t});\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/actions/wait.js":"module.exports = function(cfg) {\r\n\tcfg = cfg || {};\r\n\tvar debug = require('debug')('bp:actions:wait');\r\n\treturn function(browser) {\r\n\t\tvar duration = cfg || 5000;\r\n\t\tdebug('Waiting for some time - %d', duration);\r\n\t\treturn browser.sleep(duration);\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/index.js":"var Q = require('q'),\n\tdebug = require('debug')('bp:metrics'),\n\thelpers = require('../helpers'),\n\tProbeManager = require('../probes');\n\nfunction Metrics(metrics) {\n\tdebug('Initializing Metrics');\n\tvar me = this,\n\t\tprobeManager = this.probeManager = new ProbeManager();\n\tthis.metrics = metrics.map(function(metric) {\n\t\tvar res = null;\n\t\tif (typeof metric === 'string') {\n\t\t\tvar fn = require('./' + metric);\n\t\t\tres = new fn();\n\t\t} else if (typeof metric === 'object') {\n\t\t\tres = metric;\n\t\t}\n\t\tprobeManager.addProbes(res);\n\t\treturn res;\n\t}).filter(function(metric) {\n\t\treturn (typeof metric === 'object')\n\t});\n}\n\nMetrics.prototype.allMetrics = function(method, args) {\n\treturn this.metrics.map(function(metric) {\n\t\treturn function() {\n\t\t\tif (typeof metric[method] === 'function') {\n\t\t\t\tdebug(metric.id, method, 'called');\n\t\t\t\treturn metric[method].apply(metric, args);\n\t\t\t} else {\n\t\t\t\treturn Q();\n\t\t\t}\n\t\t}\n\t}).reduce(Q.when, Q());\n}\n\nMetrics.prototype.setup = function(cfg) {\n\tvar me = this;\n\treturn this.allMetrics('setup', [cfg]).then(function() {\n\t\treturn me.probeManager.setup(cfg);\n\t});\n};\n\nMetrics.prototype.start = function(browsers, browserConfig) {\n\tvar me = this;\n\treturn this.allMetrics('start', [browsers]).then(function() {\n\t\treturn me.probeManager.start(browsers, browserConfig);\n\t});\n}\nMetrics.prototype.teardown = function(browsers, browserConfig) {\n\tvar me = this;\n\treturn this.probeManager.teardown(browsers, browserConfig).then(function() {\n\t\treturn me.allMetrics('teardown', [browsers]);\n\t});\n}\n\nMetrics.prototype.getResults = function() {\n\tdebug('Getting Results');\n\tvar args = arguments;\n\treturn Q.allSettled(this.metrics.map(function(metric) {\n\t\tif (typeof metric.getResults === 'function') {\n\t\t\tdebug('Getting results from ', metric.id);\n\t\t\treturn metric.getResults.apply(metric, args);\n\t\t} else {\n\t\t\treturn Q();\n\t\t}\n\t})).spread(function() {\n\t\tvar res = {};\n\t\tArray.prototype.slice.call(arguments, 0).forEach(function(val) {\n\t\t\tif (val.state === 'fulfilled') {\n\t\t\t\thelpers.extend(res, val.value);\n\t\t\t}\n\t\t});\n\t\treturn res;\n\t}, function(err) {\n\t\treturn err;\n\t})\n};\n\n\nmodule.exports = Metrics;\nmodule.exports.builtIns = [\n\t'TimelineMetrics',\n\t'ChromeTracingMetrics',\n\t'RafRenderingStats',\n\t'NetworkTimings',\n\t'NetworkResources'\n];","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/index.js":"var Q = require('q'),\r\n\thelpers = require('../helpers'),\r\n\tdebug = require('debug')('bp:probes');\r\n\r\nfunction ProbeManager() {\r\n\tthis.probes = {};\r\n}\r\n\r\nProbeManager.prototype.addProbes = function(metric) {\r\n\tvar me = this;\r\n\tmetric.probes = metric.probes || [];\r\n\tmetric.probes.forEach(function(probe) {\r\n\t\tif (typeof probe === 'string') {\r\n\r\n\t\t\tif (typeof me.probes[probe] === 'object') {\r\n\t\t\t\tprobe = me.probes[probe];\r\n\t\t\t} else {\r\n\t\t\t\tvar fn = require('./' + probe);\r\n\t\t\t\tprobe = new fn();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (typeof probe !== 'object' || typeof probe.id === 'undefined') {\r\n\t\t\tthrow 'Probe needs to be an object and is ' + typeof probes + ' and should have an id';\r\n\t\t}\r\n\t\tif (typeof me.probes[probe.id] === 'undefined') {\r\n\t\t\tme.probes[probe.id] = probe;\r\n\t\t}\r\n\t\tdebug('Registering probe', probe.id);\r\n\t\t(typeof metric.onData === 'function') && probe.on('data', metric.onData.bind(metric));\r\n\t\t(typeof metric.onError === 'function') && probe.on('error', metric.onError.bind(metric));\r\n\t});\r\n};\r\n\r\nfunction promise(method) {\r\n\treturn function() {\r\n\t\tvar args = arguments,\r\n\t\t\tme = this;\r\n\t\tdebug('' + method);\r\n\t\treturn Object.keys(this.probes).map(function(probeKey) {\r\n\t\t\treturn function() {\r\n\t\t\t\tprobe = me.probes[probeKey];\r\n\t\t\t\tif (typeof probe[method] === 'function') {\r\n\t\t\t\t\tdebug(probe.id, method, 'called');\r\n\t\t\t\t\treturn probe[method].apply(probe, args);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn Q();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}).reduce(Q.when, Q());\r\n\t}\r\n}\r\n\r\nProbeManager.prototype.setup = promise('setup');\r\nProbeManager.prototype.start = promise('start');\r\nProbeManager.prototype.teardown = promise('teardown');\r\nmodule.exports = ProbeManager;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/runner.js":"/* Module to be used by other web driver runners like protractor*/\r\nvar Metrics = require('./metrics'),\r\n\toptions = require('./options'),\r\n\thelpers = require('./helpers'),\r\n\tQ = require('q'),\r\n\tdebug = require('debug')('bp:selenium:runner'),\r\n\twd = require('wd');\r\n\r\nvar metrics = null;\r\n\r\nfunction Runner(opts) {\r\n\tthis.opts = options.scrub(opts);\r\n\tthis.metrics = null;\r\n\tthis.browser = null;\r\n};\r\n\r\nRunner.prototype.setupMetrics_ = function() {\r\n\tvar me = this;\r\n\tif (this.metrics === null) {\r\n\t\tthis.metrics = new Metrics(this.opts.metrics);\r\n\t\treturn this.metrics.setup(this.opts);\r\n\t} else {\r\n\t\treturn Q();\r\n\t}\r\n};\r\n\r\nRunner.prototype.attachBrowser_ = function(sessionId) {\r\n\tif (this.browser === null) {\r\n\t\tthis.browser = wd.promiseRemote(this.opts.selenium);\r\n\t\tthis.browser.on('status', function(data) {\r\n\t\t\t//log.debug(data);\r\n\t\t});\r\n\t\tthis.browser.on('command', function(meth, path, data) {\r\n\t\t\tif (data && typeof data === 'object') {\r\n\t\t\t\tvar data = JSON.stringify(data);\r\n\t\t\t}\r\n\t\t\tdebug(meth, (path || '').substr(0, 70), (data || '').substr(0, 70));\r\n\t\t});\r\n\t\treturn this.browser.attach(sessionId);\r\n\t} else {\r\n\t\treturn Q();\r\n\t}\r\n};\r\n\r\nRunner.prototype.config = function(cb) {\r\n\tvar me = this;\r\n\tthis.setupMetrics_().then(function() {\r\n\t\tcb(null, me.opts);\r\n\t}, function(err) {\r\n\t\tcb(err);\r\n\t});\r\n}\r\n\r\nRunner.prototype.start = function(sessionId, cb) {\r\n\tvar me = this;\r\n\tif (typeof cb !== 'function') {\r\n\t\tcb = function() {};\r\n\t}\r\n\tthis.setupMetrics_().then(function() {\r\n\t\treturn me.attachBrowser_(sessionId);\r\n\t}).then(function() {\r\n\t\tme.metrics.start(me.browser).then(cb, cb);\r\n\t});\r\n};\r\n\r\nRunner.prototype.stop = function(cb) {\r\n\tvar me = this;\r\n\tthis.metrics.teardown(this.browser).then(function() {\r\n\t\treturn me.metrics.getResults();\r\n\t}).then(function(data) {\r\n\t\tcb(undefined, data);\r\n\t}, function(err) {\r\n\t\tcb(err, null);\r\n\t});\r\n};\r\n\r\nmodule.exports = Runner;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/options.js":"var sanitizers = [\r\n\t// debugBrowser\r\n\tfunction(opts) {\r\n\t\tif (typeof opts.debugBrowser === 'undefined') {\r\n\t\t\topts.debugBrowser = false;\r\n\t\t}\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// configFile\r\n\tfunction(opts) {\r\n\t\tvar fs = require('fs');\r\n\t\tif (opts.configFile) {\r\n\t\t\ttry {\r\n\t\t\t\tconfig = JSON.parse(fs.readFileSync(opts.configFile, 'utf-8'));\r\n\t\t\t\tif (config) {\r\n\t\t\t\t\tfor (var key in opts) {\r\n\t\t\t\t\t\tif (typeof opts[key] !== 'undefined') {\r\n\t\t\t\t\t\t\tconfig[key] = opts[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\topts = config;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthrow new Error('Could not read or parse configuration file - ' + e);\r\n\t\t\t}\r\n\t\t\tdelete opts.configFile;\r\n\t\t}\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// selenium\r\n\tfunction(opts) {\r\n\t\topts.selenium = opts.selenium || 'http://localhost:4444/wd/hub';\r\n\t\tif (typeof opts.selenium === 'string') {\r\n\t\t\tif (opts.selenium === 'ondemand.saucelabs.com' || opts.selenium === 'hub.browserstack.com') {\r\n\t\t\t\topts.selenium = opts.selenium + '/wd/hub';\r\n\t\t\t}\r\n\r\n\t\t\tif (!opts.selenium.match(/^http:\\/\\//)) {\r\n\t\t\t\topts.selenium = 'http://' + opts.selenium\r\n\t\t\t}\r\n\t\t\tvar url = require('url');\r\n\t\t\topts.selenium = url.parse(opts.selenium);\r\n\t\t}\r\n\r\n\t\tif (typeof opts.username !== 'undefined') {\r\n\t\t\topts.selenium.user = opts.username;\r\n\t\t}\r\n\r\n\t\tif (typeof opts.accesskey !== 'undefined') {\r\n\t\t\topts.selenium.pwd = opts.accesskey;\r\n\t\t}\r\n\t\tif (typeof opts.selenium.port !== 'number') {\r\n\t\t\topts.selenium.port = parseInt(opts.selenium.port, 10);\r\n\t\t}\r\n\t\tif (isNaN(opts.selenium.port)) {\r\n\t\t\topts.selenium.port = null;\r\n\t\t}\r\n\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// browsers\r\n\tfunction(opts) {\r\n\t\tvar browserConfig = {}; // Defaults for browsers to be added here\r\n\r\n\t\tvar passedBrowsers = opts.browsers || opts.browser;\r\n\t\tif (typeof passedBrowsers === 'undefined') {\r\n\t\t\tpassedBrowsers = [{\r\n\t\t\t\tbrowserName: 'chrome',\r\n\t\t\t\tversion: 35\r\n\t\t\t}];\r\n\t\t} else if (typeof passedBrowsers === 'string') {\r\n\t\t\tpassedBrowsers = passedBrowsers.split(/[,;]/);\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\tpassedBrowsers.forEach(function(passedBrowser) {\r\n\t\t\tpassedBrowser = (typeof passedBrowser === 'string' ? {\r\n\t\t\t\t'browserName': passedBrowser\r\n\t\t\t} : passedBrowser);\r\n\r\n\t\t\tif (typeof browserConfig[passedBrowser.browserName] !== 'undefined') {\r\n\t\t\t\tvar matchingBrowserCfg = browserConfig[passedBrowser.browserName] || browserConfig[passedBrowser.browserName]\r\n\t\t\t\tfor (var key in matchingBrowserCfg) {\r\n\t\t\t\t\tif (typeof passedBrowser[key] === 'undefined') {\r\n\t\t\t\t\t\tpassedBrowser[key] = matchingBrowserCfg[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Add activity name for android browsers\r\n\t\t\tif (passedBrowser.browserName && passedBrowser.browserName.match(/android/gi)) {\r\n\t\t\t\tpassedBrowser.chromeOptions = passedBrowser.chromeOptions || {};\r\n\t\t\t\tif (typeof passedBrowser.chromeOptions.androidPackage === 'undefined') {\r\n\t\t\t\t\tpassedBrowser.chromeOptions.androidPackage = 'com.android.chrome';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Setting platform if it does not exist\r\n\t\t\tif (typeof passedBrowser.platform === 'undefined' || typeof passedBrowser.platformName === 'undefined') {\r\n\t\t\t\tif (opts.selenium.hostname.match(/ondemand.saucelabs.com/) || opts.selenium.hostname.match(/hub.browserstack.com/)) {\r\n\t\t\t\t\tpassedBrowser.platform = 'WINDOWS';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tresult.push(passedBrowser);\r\n\t\t});\r\n\t\topts.browsers = result;\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// username and accesskey or password\r\n\tfunction(opts) {\r\n\t\topts.accesskey = opts.accesskey || opts.password;\r\n\t\tdelete opts.password;\r\n\t\tif (opts.selenium.hostname.match(/ondemand.saucelabs.com/)) {\r\n\t\t\topts.SAUCE_USERNAME = opts.SAUCE_USERNAME || opts.username;\r\n\t\t\topts.SAUCE_ACCESSKEY = opts.SAUCE_ACCESSKEY || opts.accesskey;\r\n\t\t\tif (typeof opts.SAUCE_USERNAME !== 'undefined' && typeof opts.SAUCE_ACCESSKEY !== 'undefined') {\r\n\t\t\t\topts.selenium.auth = opts.SAUCE_USERNAME + ':' + opts.SAUCE_ACCESSKEY;\r\n\t\t\t\tdelete opts.SAUCE_ACCESSKEY;\r\n\t\t\t\tdelete opts.SAUCE_USERNAME;\r\n\t\t\t}\r\n\t\t} else if (opts.selenium.hostname.match(/hub.browserstack.com/)) {\r\n\t\t\topts.BROWSERSTACK_USERNAME = opts.BROWSERSTACK_USERNAME || opts.username;\r\n\t\t\topts.BROWSERSTACK_KEY = opts.BROWSERSTACK_KEY || opts.accesskey;\r\n\t\t\tif (typeof opts.BROWSERSTACK_USERNAME !== 'undefined') {\r\n\t\t\t\topts.browsers.forEach(function(browser) {\r\n\t\t\t\t\tbrowser['browserstack.user'] = opts.BROWSERSTACK_USERNAME;\r\n\t\t\t\t\tbrowser['browserstack.key'] = opts.BROWSERSTACK_KEY;\r\n\t\t\t\t});\r\n\t\t\t\tdelete opts.BROWSERSTACK_USERNAME;\r\n\t\t\t\tdelete opts.BROWSERSTACK_KEY;\r\n\t\t\t\tdelete opts.selenium.user;\r\n\t\t\t\tdelete opts.selenium.pwd;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdelete opts.username;\r\n\t\tdelete opts.password;\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// preScript, preScriptFile\r\n\tfunction(opts) {\r\n\t\tif (opts.preScriptFile) {\r\n\t\t\tvar path = require('path');\r\n\t\t\topts.preScript = require(path.resolve(opts.preScriptFile));\r\n\t\t\tdelete opts.preScriptFile;\r\n\t\t}\r\n\t\topts.preScript = opts.preScript || function(browser) {\r\n\t\t\treturn;\r\n\t\t};\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// actions\r\n\tfunction(opts) {\r\n\t\topts.actions = opts.actions || 'scroll';\r\n\t\tif (typeof opts.actions === 'string') {\r\n\t\t\topts.actions = opts.actions.split(/[,;]/);\r\n\t\t} else if (typeof opts.actions === 'function') {\r\n\t\t\topts.actions = [opts.actions];\r\n\t\t}\r\n\t\treturn opts;\r\n\t},\r\n\r\n\t// metrics\r\n\tfunction(opts) {\r\n\t\topts.metrics = opts.metrics || require('./metrics').builtIns;\r\n\t\tif (typeof opts.metrics === 'string') {\r\n\t\t\topts.metrics = opts.metrics.split(/[,;]/);\r\n\t\t} else if (typeof opts.metrics === 'function') {\r\n\t\t\topts.metrics = [opts.metrics];\r\n\t\t}\r\n\t\treturn opts;\r\n\t},\r\n\r\n    /**\r\n     * Metric options\r\n     *\r\n     * @example opts.metricOptions = { \"METRIC_ID\" : { option1 : value1, ... , optionN : valueN } }\r\n     * @param {object} opts\r\n     */\r\n    function (opts) {\r\n        opts.metricOptions = opts.metricOptions || {};\r\n        return opts;\r\n    }\r\n];\r\n\r\n\r\nmodule.exports = {\r\n\tscrub: function(cfg) {\r\n\t\tcfg = cfg || {};\r\n\t\tsanitizers.forEach(function(sanitizer, i) {\r\n\t\t\tcfg = sanitizer(cfg);\r\n\t\t});\r\n\t\treturn cfg;\r\n\t},\r\n\tsanitizers: sanitizers\r\n};","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/docs/index.js":"var Docs = function(source) {\r\n\tvar glob = require('glob');\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tvar files;\r\n\tif (typeof source !== 'undefined' && typeof source === 'string') {\r\n\t\tfiles = [source + '.json'];\r\n\t} else if (Array.isArray(source)) {\r\n\t\tfiles = source.map(function(file) {\r\n\t\t\treturn file + (path.extname(file) !== '.json' ? '.json' : '');\r\n\t\t});\r\n\t} else {\r\n\t\tfiles = glob.sync('*.json', {\r\n\t\t\tcwd: __dirname\r\n\t\t});\r\n\t}\r\n\r\n\tthis.metrics = {};\r\n\tfor (var i = 0; i < files.length; i++) {\r\n\t\tvar fileContent = JSON.parse(fs.readFileSync(path.join(__dirname, files[i]), 'utf-8'));\r\n\t\tfor (var key in fileContent) {\r\n\t\t\tthis.metrics[key] = fileContent[key];\r\n\t\t}\r\n\t}\r\n};\r\n\r\nDocs.prototype.get = function(metric) {\r\n\treturn this.metrics[metric] || {};\r\n};\r\n\r\nDocs.prototype.getProp = function(metric, prop) {\r\n\treturn (typeof this.metrics[metric] !== 'undefined' ? this.metrics[metric][prop] : undefined);\r\n};\r\n\r\nmodule.exports = Docs;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/cli.js":"#!/usr/bin/env node\n\nvar version = require('../package.json').version;\nvar program = require('commander');\nvar debug = require('debug');\n\nprogram\n\t.version(version)\n\t.option('-s, --selenium <serverURL>', 'Specify Selenium Server, like localhost:4444 or ondemand.saucelabs.com:80')\n\t.option('-v --verbose')\n\t.option('-u --username <username>', 'Sauce, BrowserStack or Selenium User Name')\n\t.option('-a --accesskey <accesskey>', 'Sauce, BrowserStack or Selenium Access Key')\n\t.option('-d --debug', 'Enable debug mode, keep the browser alive even after the tests', false)\n\t.option('-c --config-file <configFile>', 'Specify a configuration file. If other options are specified, they have precedence over options in config file')\n\t.option('-o --output <output>', 'Format of output [table|json], defaults to table')\n\t.option('--prescript-file <preScriptFile>', 'Prescript node module to run (for login, etc) before the tests. Module should be module.exports = function(browser, callback){}')\n\t.option('--all', 'Display all metrics')\n\t.option('-b --browsers <list of browsers>', 'Browsers to run the test on', function(val) {\n\t\treturn val.split(',');\n\t})\n\t.parse(process.argv);\n\nvar url = program.args[0];\nprogram.output = program.output || 'table';\n\nvar MAX_IMPORTANCE = 30;\nif (program.all){\n\tMAX_IMPORTANCE = 0;\n}\n\nif (program.verbose && !process.env.DEBUG) {\n\tprocess.env.DEBUG = 'bp:*';\n}\n\nrequire('./index.js')(url, function(err, data) {\n\tif (err) {\n\t\tdebug(err);\n\t\terr.forEach(function(e){\n\t\t\tif (e.errno === 'GRID_CONFIG_ERROR'){\n\t\t\t\tconsole.log('Please check your Selenium config. Cannot reach grid at '+ e.address + ':' + e.port);\n\t\t\t} else {\n\t\t\t\tconsole.log(e.stack ? e.stack : e);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (program.output === 'table') {\n\t\t\tconsole.log(generateTable(data));\n\t\t} else {\n\t\t\tconsole.log(data);\n\t\t}\n\t}\n}, {\n\tbrowsers: program.browsers,\n\tselenium: program.selenium,\n\tusername: program.username,\n\taccesskey: program.accesskey,\n\tdebugBrowser: program.debug,\n\tconfigFile: program.configFile,\n\tpreScriptFile: program.prescriptFile\n});\n\nfunction generateTable(data) {\n\tvar cliTable = require('cli-table');\n\tvar Docs = require('../docs');\n\n\tvar apiDocs = new Docs();\n\tvar decimalPoints = {\n\t\tms: 3,\n\t\tcount: 0,\n\t\tfps: 3,\n\t\tpercentage: 2,\n\t}\n\n\tvar res = [];\n\tfor (var i = 0; i < data.length; i++) {\n\t\tres.push('\\n\\nBrowser: ', data[i]._browserName + '\\n');\n\t\tvar table = new cliTable({\n\t\t\thead: ['Metrics', 'Value', 'Unit', 'Source'],\n\t\t\tcolAligns: ['right', 'right', 'left', 'right'],\n\t\t\tcolWidths: [35, 20, 10, 15]\n\t\t});\n\t\tfor (var key in data[i]) {\n\t\t\tif (key.indexOf('_') === 0)\n\t\t\t\tcontinue;\n\t\t\tif ((apiDocs.getProp(key, 'importance') || 0) < MAX_IMPORTANCE)\n\t\t\t\tcontinue;\n\n\t\t\tvar val = data[i][key];\n\t\t\tvar unit = '' + (apiDocs.getProp(key, 'unit') || '');\n\t\t\tif (typeof val === 'number') {\n\t\t\t\tif (typeof decimalPoints[unit] !== 'undefined') {\n\t\t\t\t\tval = val.toFixed(decimalPoints[unit]);\n\t\t\t\t} else {\n\t\t\t\t\tval = val + '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttable.push([key, val + '', unit, '' + (apiDocs.getProp(key, 'source') || '')]);\n\t\t}\n\t\ttable = table.sort(function(a, b) {\n\t\t\tvar rankA = apiDocs.getProp(a[0], 'importance') || -1;\n\t\t\tvar rankB = apiDocs.getProp(b[0], 'importance') || -1;\n\n\t\t\tif (rankA === rankB) {\n\t\t\t\tif (a[3] === b[3]) {\n\t\t\t\t\treturn a[0] > b[0] ? 1 : -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn a[3] > b[3] ? 1 : -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn rankA > rankB ? 1 : (rankA < rankB ? -1 : 0);\n\t\t\t}\n\t\t})\n\t\tres.push(table.toString());\n\t}\n\treturn res.join('');\n}\n\n// END of File","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/BaseMetrics.js":"var Q = require('q');\r\n\r\nfunction BaseMetric(cfg) {\r\n\tcfg = cfg || {};\r\n\tthis.probes = cfg.probes || this.probes;\r\n\tif (!this.probes || !Array.isArray(this.probes)) {\r\n\t\tthis.probes = [];\r\n\t}\r\n\tthis.hrtime = process.hrtime();\r\n\tthis.__data = [];\r\n};\r\n\r\nBaseMetric.prototype.getResults = function() {\r\n\tthrow 'getResults not implemented for ' + this.id;\r\n};\r\n\r\nBaseMetric.prototype.onError = function(err) {\r\n\r\n};\r\n\r\nBaseMetric.prototype.onData = function(data) {\r\n\tthis.hrtime = process.hrtime(this.hrtime);\r\n\tif (data) {\r\n\t\tdata.__time = this.hrtime[0];\r\n\t\tthis.__data.push(data);\r\n\t}\r\n};\r\n\r\nvar difference = function(a, b) {\r\n\tif (typeof a !== typeof b) {\r\n\t\treturn NaN;\r\n\t}\r\n\tif (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\r\n\t\treturn a.map(function(el, i) {\r\n\t\t\treturn el - b[i];\r\n\t\t});\r\n\t} else if (typeof a === 'object') {\r\n\t\tvar diff = {};\r\n\t\tfor (var key in a) {\r\n\t\t\tdiff[key] = difference(a[key], b[key]);\r\n\t\t}\r\n\t\treturn diff;\r\n\t} else {\r\n\t\treturn a - b;\r\n\t}\r\n}\r\n\r\nBaseMetric.prototype.__getDeltas = function() {\r\n\tvar deltas = [];\r\n\tif (this.__data.length === 1) {\r\n\t\treturn this.__data[0];\r\n\t}\r\n\tfor (var i = 1; i < this.__data.length; i++) {\r\n\t\tvar x = difference(this.__data[i], this.__data[i - 1]);\r\n\t\tdeltas.push(x);\r\n\t}\r\n\treturn (deltas.length === 1 ? deltas[0] : deltas);\r\n};\r\n\r\nmodule.exports = BaseMetric;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/ChromeTracingMetrics.js":"/*\nBased on \nhttps://chromium.googlesource.com/chromium/src/+/e2f820e34c43102785cfc9f38bde8b5a052938b8/tools/telemetry/telemetry/web_perf/metrics/smoothness.py\n*/\n\nvar Q = require('q'),\n\tBaseMetrics = require('./BaseMetrics'),\n\thelpers = require('../helpers'),\n\tstatistics = require('./util/statistics'),\n\tRenderingStats = require('./util/RenderingStats'),\n\tdebug = require('debug')('bp:metrics:ChromeTracingMetrics');\n\nfunction ChromeTracingMetrics() {\n\tBaseMetrics.apply(this, arguments);\n\tthis.renderingStats = new RenderingStats();\n}\n\nrequire('util').inherits(ChromeTracingMetrics, BaseMetrics);\n\nChromeTracingMetrics.prototype.id = 'ChromeTracingMetrics';\nChromeTracingMetrics.prototype.probes = ['PerfLogProbe', 'AndroidTracingProbe'];\n\nvar TRACE_CATEGORIES = ['benchmark'];\nvar TraceCategoryRegEx = new RegExp('\\\\b(' + TRACE_CATEGORIES.join('|') + '|__metadata)\\\\b');\n\nChromeTracingMetrics.prototype.setup = function(cfg) {\n\tcfg.browsers = cfg.browsers.map(function(browser) {\n\t\tif (browser.browserName && browser.browserName === 'chrome') {\n\t\t\thelpers.extend(browser, {\n\t\t\t\tchromeOptions: {\n\t\t\t\t\tperfLoggingPrefs: {}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tbrowser.chromeOptions.perfLoggingPrefs.traceCategories = [\n\t\t\t\tbrowser.chromeOptions.perfLoggingPrefs.traceCategories || '',\n\t\t\t\tTRACE_CATEGORIES\n\t\t\t].join();\n\t\t}\n\t\treturn browser;\n\t});\n\treturn Q(cfg);\n};\n\nChromeTracingMetrics.prototype.onData = function(data) {\n\tif (data.type === 'perfLog') {\n\t\tvar msg = data.value;\n\t\tif (msg.method === 'Tracing.dataCollected' && TraceCategoryRegEx.test(msg.params.cat)) {\n\t\t\tthis.renderingStats.addData(msg.params);\n\t\t}\n\t} else if (data.type === 'androidTracing') {\n\t\tthis.renderingStats.addData(data.value);\n\t}\n};\n\nChromeTracingMetrics.prototype.getResults = function() {\n\tvar results = {};\n\tvar frames = this.renderingStats.getFrames();\n\tthis._ComputeFrameTimeMetric(frames, results);\n\tthis._ComputeFrameTimeDiscrepancy(frames, results);\n\treturn results;\n};\n\nChromeTracingMetrics.prototype._HasEnoughFrames = function(timestamps) {\n\tif (timestamps.length < 2) {\n\t\tdebug('Does not have enough frames for computing tracing');\n\t}\n\treturn timestamps.length >= 2;\n};\n\n/*\nReturns Values for the frame time metrics.\nThis includes the raw and mean frame times, as well as the percentage of frames that were hitting 60 fps.\n*/\nChromeTracingMetrics.prototype._ComputeFrameTimeMetric = function(stats, res) {\n\tif (this._HasEnoughFrames(stats.frame_timestamps)) {\n\n\t\tvar smooth_threshold = 17.0;\n\t\tvar smooth_count = stats.frame_times.filter(function(t) {\n\t\t\treturn t < smooth_threshold;\n\t\t}).length;\n\n\t\tres.mean_frame_time = statistics.ArithmeticMean(stats.frame_times);\n\t\tres.percentage_smooth = smooth_count / stats.frame_times.length * 100.0;\n\t\tres.frames_per_sec = 1000 / res.mean_frame_time;\n\t}\n};\n\n// Returns a Value for the absolute discrepancy of frame time stamps\nChromeTracingMetrics.prototype._ComputeFrameTimeDiscrepancy = function(stats, res) {\n\tif (this._HasEnoughFrames(stats.frame_timestamps)) {\n\t\tres.frame_time_discrepancy = statistics.TimestampsDiscrepancy(stats.frame_timestamps);\n\t}\n};\n\nmodule.exports = ChromeTracingMetrics;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/util/statistics.js":"/*\r\nBased on \r\nhttps://chromium.googlesource.com/chromium/src/+/6df438ed2adaf24fa2f4a92d4f3863825247b910/tools/telemetry/telemetry/util/statistics.py\r\n*/\r\n\r\n/* \r\nReturns the float value of a number or the sum of a list.\r\n*/\r\nfunction Total(data) {\r\n\tif (typeof data === 'number') {\r\n\t\treturn data;\r\n\t} else if (Array.isArray(data)) {\r\n\t\treturn data.reduce(function(previousValue, currentValue, index, array) {\r\n\t\t\treturn previousValue + currentValue;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/* \r\nReturns the quotient, or zero if the denominator is zero\r\n*/\r\nfunction DivideIfPossibleOrZero(numerator, denominator) {\r\n\treturn denominator ? numerator / denominator : 0;\r\n}\r\n\r\n/*\r\n Calculates arithmetic mean.\r\n\r\n  Args:\r\n    data: A list of samples.\r\n\r\n  Returns:\r\n    The arithmetic mean value, or 0 if the list is empty.\r\n*/\r\nfunction ArithmeticMean(data) {\r\n\tnumerator_total = Total(data);\r\n\tdenominator_total = Total(data.length);\r\n\treturn DivideIfPossibleOrZero(numerator_total, denominator_total);\r\n}\r\n\r\n/*\r\nSorts the samples, and map them linearly to the range [0,1].\r\n\r\nThey're mapped such that for the N samples, the first sample is 0.5/N and the\r\nlast sample is (N-0.5)/N.\r\n\r\nBackground: The discrepancy of the sample set i/(N-1); i=0, ..., N-1 is 2/N,\r\ntwice the discrepancy of the sample set (i+1/2)/N; i=0, ..., N-1. In our case\r\nwe don't want to distinguish between these two cases, as our original domain\r\nis not bounded (it is for Monte Carlo integration, where discrepancy was\r\nfirst used).\r\n*/\r\nfunction NormalizeSamples(samples) {\r\n\tif (!samples) {\r\n\t\treturn 1;\r\n\t}\r\n\tsamples = samples.sort();\r\n\tvar low = Math.min.apply(null, samples);\r\n\tvar high = Math.max.apply(null, samples);\r\n\tvar new_low = 0.5 / samples.length;\r\n\tvar new_high = (samples.length - 0.5) / samples.length;\r\n\tif (high - low == 0.0) {\r\n\t\treturn {\r\n\t\t\tsamples: samples.map(function(s) {\r\n\t\t\t\treturn 0.5;\r\n\t\t\t}),\r\n\t\t\tscale: 1\r\n\t\t}\r\n\t}\r\n\tvar scale = (new_high - new_low) / (high - low);\r\n\tfor (var i = 0; i < samples.length; i++) {\r\n\t\tsamples[i] = (samples[i] - low) * scale + new_low\r\n\t}\r\n\treturn {\r\n\t\tsamples: samples,\r\n\t\tscale: scale\r\n\t}\r\n}\r\n\r\n/*\r\nClamp a value between some low and high value\r\n*/\r\nfunction Clamp(value, low, high) {\r\n\tlow = typeof low === 'undefined' ? 0 : low;\r\n\thigh = typeof high === 'undefined' ? 0 : high;\r\n\tconsole.log(value, low, high)\r\n\treturn Math.min(Math.max(value, low), high);\r\n}\r\n\r\n/*\r\nComputes the discrepancy of a set of 1D samples from the interval [0,1].\r\n\r\nThe samples must be sorted. We define the discrepancy of an empty set\r\nof samples to be zero.\r\n\r\nhttp://en.wikipedia.org/wiki/Low-discrepancy_sequence\r\nhttp://mathworld.wolfram.com/Discrepancy.html\r\n*/\r\n\r\nfunction Discrepancy(samples, location_count) {\r\n\tif (!samples) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tvar max_local_discrepancy = 0;\r\n\tvar inv_sample_count = 1.0 / samples.length;\r\n\tvar locations = [],\r\n\t\tcount_less = [],\r\n\t\tcount_less_equal = [];\r\n\r\n\tif (location_count) {\r\n\t\t//Generate list of equally spaced locations.\r\n\t\tvar sample_index = 0;\r\n\t\tfor (var i = 0; i < location_count; i++) {\r\n\t\t\tvar location = i / location_count - 1;\r\n\t\t\tlocations.push(location);\r\n\t\t\twhile (sample_index < samples.length && samples[sample_index] < location)\r\n\t\t\t\tsample_index += 1;\r\n\t\t\tcount_less.push(sample_index);\r\n\t\t\twhile (sample_index < samples.length && samples[sample_index] <= location)\r\n\t\t\t\tsample_index += 1;\r\n\t\t\tcount_less_equal.push(sample_index);\r\n\t\t}\r\n\t} else {\r\n\t\tif (samples[0] > 0.0) {\r\n\t\t\tlocations.push(0.0);\r\n\t\t\tcount_less.push(0);\r\n\t\t\tcount_less_equal.push(0);\r\n\t\t}\r\n\t\tfor (var i = 0; i < samples.length; i++) {\r\n\t\t\tlocations.push(samples[i]);\r\n\t\t\tcount_less.push(i);\r\n\t\t\tcount_less_equal.push(i + 1);\r\n\t\t}\r\n\t\tif (samples[-1] < 1.0) {\r\n\t\t\tlocations.push(1.0);\r\n\t\t\tcount_less.push(samples.length);\r\n\t\t\tcount_less_equal.push(samples.length);\r\n\t\t}\r\n\t}\r\n\r\n\t// Iterate over the intervals defined by any pair of locations.\r\n\tfor (var i = 0; i < locations.length; i++) {\r\n\t\tfor (var j = i + 1; j < locations.length; j++) {\r\n\t\t\t// # Length of interval\r\n\t\t\tvar length = locations[j] - locations[i];\r\n\r\n\t\t\t// Local discrepancy for closed interval\r\n\t\t\tvar count_closed = count_less_equal[j] - count_less[i];\r\n\t\t\tvar local_discrepancy_closed = Math.abs(count_closed * inv_sample_count - length);\r\n\t\t\tvar max_local_discrepancy = Math.max(local_discrepancy_closed, max_local_discrepancy);\r\n\r\n\t\t\t// Local discrepancy for open interval\r\n\t\t\tvar count_open = count_less[j] - count_less_equal[i];\r\n\t\t\tvar local_discrepancy_open = Math.abs(count_open * inv_sample_count - length);\r\n\t\t\tvar max_local_discrepancy = Math.max(local_discrepancy_open, max_local_discrepancy);\r\n\t\t}\r\n\t}\r\n\treturn max_local_discrepancy;\r\n}\r\n\r\n/*\r\nA discrepancy based metric for measuring timestamp jank.\r\n\r\nTimestampsDiscrepancy quantifies the largest area of jank observed in a series\r\nof timestamps.  Note that this is different from metrics based on the\r\nmax_time_interval. For example, the time stamp series A = [0,1,2,3,5,6] and\r\nB = [0,1,2,3,5,7] have the same max_time_interval = 2, but\r\nDiscrepancy(B) > Discrepancy(A).\r\n\r\nTwo variants of discrepancy can be computed:\r\n\r\nRelative discrepancy is following the original definition of\r\ndiscrepancy. It characterized the largest area of jank, relative to the\r\nduration of the entire time stamp series.  We normalize the raw results,\r\nbecause the best case discrepancy for a set of N samples is 1/N (for\r\nequally spaced samples), and we want our metric to report 0.0 in that\r\ncase.\r\n\r\nAbsolute discrepancy also characterizes the largest area of jank, but its\r\nvalue wouldn't change (except for imprecisions due to a low\r\n|interval_multiplier|) if additional 'good' intervals were added to an\r\nexisiting list of time stamps.  Its range is [0,inf] and the unit is\r\nmilliseconds.\r\n\r\nThe time stamp series C = [0,2,3,4] and D = [0,2,3,4,5] have the same\r\nabsolute discrepancy, but D has lower relative discrepancy than C.\r\n\r\n|timestamps| may be a list of lists S = [S_1, S_2, ..., S_N], where each\r\nS_i is a time stamp series. In that case, the discrepancy D(S) is:\r\nD(S) = max(D(S_1), D(S_2), ..., D(S_N))\r\n*/\r\nfunction TimestampsDiscrepancy(timestamps, absolute, location_count) {\r\n\tabsolute = typeof absolute === 'undefined' ? true : absolute;\r\n\tlocation_count = typeof location_count === 'undefined' ? null : location_count;\r\n\r\n\tif (!timestamps) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tvar normal = NormalizeSamples(timestamps);\r\n\tvar samples = normal.samples,\r\n\t\tsample_scale = normal.scale;\r\n\tvar discrepancy = Discrepancy(samples, location_count);\r\n\tvar inv_sample_count = 1.0 / samples.length;\r\n\r\n\tif (absolute)\r\n\t\tdiscrepancy /= sample_scale;\r\n\telse\r\n\t\tdiscrepancy = Clamp((discrepancy - inv_sample_count) / (1.0 - inv_sample_count));\r\n\treturn discrepancy;\r\n}\r\n\r\nmodule.exports = {\r\n\tArithmeticMean: ArithmeticMean,\r\n\tTimestampsDiscrepancy: TimestampsDiscrepancy\r\n};","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/util/RenderingStats.js":"/* \r\nbased on \r\nhttps://chromium.googlesource.com/chromium/src/+/e2f820e34c43102785cfc9f38bde8b5a052938b8/tools/telemetry/telemetry/web_perf/metrics/rendering_stats.py\r\nJust picking up mean frame time, ignoring everything about InputLatency\r\n\r\nJust returns frame_times and frame_timestamps that are used to calculate the metrics in \r\nhttps://chromium.googlesource.com/chromium/src/+/e2f820e34c43102785cfc9f38bde8b5a052938b8/tools/telemetry/telemetry/web_perf/metrics/smoothness.py\r\n*/\r\n\r\nvar debug = require('debug')('bp:metrics:RenderingStats');\r\n\r\nfunction GetTimestampEventName(events, pid) {\r\n\tvar eventName = null;\r\n\tfor (var i = 0; i < events.length; i++) {\r\n\t\tvar event = events[i];\r\n\t\tif (event.pid === pid && event.name === 'BenchmarkInstrumentation::DisplayRenderingStats' || event.name === 'BenchmarkInstrumentation::MainThreadRenderingStats') {\r\n\t\t\tif (typeof event.args.data !== 'undefined' && event.args['data']['frame_count'] === 1) {\r\n\t\t\t\tif (eventName === event.name) {\r\n\t\t\t\t\treturn event.name\r\n\t\t\t\t}\r\n\t\t\t\teventName = event.name;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 'BenchmarkInstrumentation::ImplThreadRenderingStats';\r\n};\r\n\r\nvar RenderingStats = function() {\r\n\tthis.events = [];\r\n};\r\n\r\n// List of events useful for calculations\r\nvar events = [\r\n\t'BenchmarkInstrumentation::ImplThreadRenderingStats',\r\n\t'BenchmarkInstrumentation::DisplayRenderingStats',\r\n\t'BenchmarkInstrumentation::MainThreadRenderingStats',\r\n\t'process_labels'\r\n]\r\nvar eventNameRegex = new RegExp('(' + events.join('|') + ')');\r\n\r\n// Only store the events that are useful for calculations\r\nRenderingStats.prototype.addData = function(data) {\r\n\tif (eventNameRegex.test(data.name)) {\r\n\t\tthis.events.push(data);\r\n\t}\r\n};\r\n\r\nRenderingStats.prototype.getFrames = function() {\r\n\tvar events = this.events;\r\n\tthis.events.sort(function(a, b) {\r\n\t\treturn (a.ts >= b.ts ? 1 : -1);\r\n\t});\r\n\r\n\tthis.frame_timestamps = [];\r\n\tthis.frame_times = [];\r\n\tthis.approximated_pixel_percentages = [];\r\n\r\n\tthis.processId = findRenderProcess(events);\r\n\tdebug('Process ID for render process is ', this.processId);\r\n\r\n\ttimestamp_event_name = GetTimestampEventName(events, this.processId);\r\n\tdebug('Timestamp Event name is ', timestamp_event_name);\r\n\r\n\tthis._InitFrameTimestampsFromTimeline(events, timestamp_event_name);\r\n\tthis._InitImplThreadRenderingStatsFromTimeline(events);\r\n\tif (this.frame_timestamps < 0) {\r\n\t\tdebug('No timestamps found for tracing data');\r\n\t}\r\n\treturn {\r\n\t\tframe_timestamps: this.frame_timestamps,\r\n\t\tframe_times: this.frame_times\r\n\t};\r\n};\r\n\r\n\r\nfunction findRenderProcess(events) {\r\n\t// TODO - Find a better way to identify the running process -\r\n\t// Will break if site opens multiple tabs\r\n\t// Also breaks if site does not have a title\r\n\tfor (var i = 0; i < events.length; i++) {\r\n\t\tif (events[i].name === 'process_labels') {\r\n\t\t\treturn events[i].pid;\r\n\t\t}\r\n\t}\r\n\tdebug('Looked at all events, could not find a process_labels. Pid is undefined');\r\n};\r\n\r\nRenderingStats.prototype._GatherEvents = function(event_name, events, timeline_range) {\r\n\tvar processId = this.processId;\r\n\tvar me = this;\r\n\treturn {\r\n\t\tforEach: function(cb) {\r\n\t\t\tfor (var i = 0; i < events.length; i++) {\r\n\t\t\t\tvar event = events[i];\r\n\t\t\t\tif (event.pid === processId && event.name === event_name && typeof event.args !== 'undefined' && typeof event.args.data !== 'undefined') {\r\n\t\t\t\t\tcb.call(me, event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\n\r\nRenderingStats.prototype._AddFrameTimestamp = function(event) {\r\n\tvar frame_count = event.args['data']['frame_count'];\r\n\tif (frame_count > 1) {\r\n\t\tdebug('trace contains multi-frame render stats');\r\n\t}\r\n\tif (frame_count == 1) {\r\n\t\tthis.frame_timestamps.push(event.ts / 1000); // event.start is not available, only event.ts is\r\n\t\tif (this.frame_timestamps.length >= 2) {\r\n\t\t\tthis.frame_times.push(this.frame_timestamps[this.frame_timestamps.length - 1] -\r\n\t\t\t\tthis.frame_timestamps[this.frame_timestamps.length - 2]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nRenderingStats.prototype._InitFrameTimestampsFromTimeline = function(events, timestamp_event_name) {\r\n\tvar events = this._GatherEvents(timestamp_event_name, events);\r\n\tevents.forEach(function(event) {\r\n\t\tthis._AddFrameTimestamp(event);\r\n\t});\r\n};\r\n\r\nRenderingStats.prototype._InitImplThreadRenderingStatsFromTimeline = function(events, timeline_range) {\r\n\tvar event_name = 'BenchmarkInstrumentation::ImplThreadRenderingStats';\r\n\tvar events = this._GatherEvents(event_name, events, timeline_range);\r\n\tevents.forEach(function(event) {\r\n\t\tvar data = event.args['data'];\r\n\t\tif (typeof data['visible_content_area'] !== 'undefined') {\r\n\t\t\tthis.approximated_pixel_percentages.push(data['approximated_visible_content_area'] / data['visible_content_area'] * 100.0);\r\n\t\t} else {\r\n\t\t\tthis.approximated_pixel_percentages.push(0);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nmodule.exports = RenderingStats;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/NetworkResources.js":"var BaseMetrics = require('./BaseMetrics'),\r\n    helpers = require('../helpers'),\r\n    StatData = require('./util/StatData'),\r\n    Q = require('q');\r\n\r\nfunction NetworkResources() {\r\n\r\n    /**\r\n     * \"outputRawData\" config option to decide whether or not Metric should return raw data\r\n     *\r\n     * \"resultsBeforeStart\" window.performance.getEntries() track all resources, even before browser-perf is started.\r\n     * With this option, metric could return all (\"true\") results or only between Probe \"start\" and \"teardown\" (\"false\")\r\n     *\r\n     * @type {{outputRawData: boolean, resultsBeforeStart: boolean}}\r\n     */\r\n    this.defaultOptions = {\r\n        'outputRawData' : false,\r\n        'resultsBeforeStart' : false\r\n    };\r\n\r\n    // Initialize result statistics object\r\n    this.stats = {};\r\n\r\n    // Check http://www.w3.org/TR/resource-timing/ for available types\r\n    this.typesMapping = {\r\n        'subdocument' : 'iframe',\r\n        'iframe' : 'iframe',\r\n        'img' : 'image',\r\n        'link' : 'css',\r\n        'script' : 'js',\r\n        'css' : 'image', //mean resource is loaded from CSS file\r\n        'xmlhttprequest' : 'xhrrequest'\r\n    };\r\n\r\n    BaseMetrics.apply(this, arguments);\r\n}\r\nrequire('util').inherits(NetworkResources, BaseMetrics);\r\n\r\nNetworkResources.prototype.id = 'NetworkResources';\r\nNetworkResources.prototype.probes = ['NetworkResourcesProbe'];\r\n\r\n/**\r\n * Metrics setup\r\n * Extend default configuration options\r\n *\r\n * @param config\r\n * @returns {*}\r\n */\r\nNetworkResources.prototype.setup = function (config) {\r\n    var options = config.metricOptions[this.id] || {};\r\n    this.options = helpers.extend(this.defaultOptions, options);\r\n\r\n    return Q(config);\r\n};\r\n\r\nNetworkResources.prototype.onData = function(data) {\r\n    this.resources = data;\r\n    this.resources.forEach(function(element) {\r\n        // Process only \"resource\" type results, so we do not add \"marks\" and \"measures\" into StatData\r\n        if (element['entryType'] && element['entryType'] === 'resource') {\r\n            this.addData(element);\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Calculate type based on resource properties and add it to stats\r\n *\r\n * @param row\r\n */\r\nNetworkResources.prototype.addData = function(row) {\r\n\r\n    var type = this.typesMapping[row['initiatorType']] || 'other';\r\n    var statsKey = 'Network' + type[0].toUpperCase() + type.slice(1);\r\n\r\n    if (typeof this.stats[statsKey] === 'undefined') {\r\n        this.stats[statsKey] = new StatData();\r\n    }\r\n\r\n    this.stats[statsKey].add(row['duration']);\r\n};\r\n\r\n/**\r\n * Calculate results for Networking Resources usage\r\n *\r\n * @returns {object}\r\n */\r\nNetworkResources.prototype.getResults = function() {\r\n\r\n    var result = {};\r\n\r\n    for (var key in this.stats) {\r\n        var stats = this.stats[key].getStats();\r\n        if (stats.sum === 0) {\r\n            result[key] = stats.count;\r\n        } else {\r\n            result[key] = stats.sum;\r\n            result[key + '_avg'] = stats.mean;\r\n            result[key + '_max'] = stats.max;\r\n            result[key + '_count'] = stats.count;\r\n        }\r\n    }\r\n\r\n    if (this.options.outputRawData) {\r\n        result['NetworkRawData'] = this.resources || [];\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = NetworkResources;\r\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/util/StatData.js":"function StatData() {\r\n\tthis.count = this.sum = this.sumsq = 0;\r\n\tthis.max = this.min = null;\r\n}\r\n\r\nStatData.prototype.add = function(val) {\r\n\tif (typeof val === 'number') {\r\n\t\tthis.count++;\r\n\t\tthis.sum += val;\r\n\t\tthis.sumsq += (val * val);\r\n\t\tif (this.max === null || val > this.max) {\r\n\t\t\tthis.max = val;\r\n\t\t}\r\n\t\tif (this.min === null || val < this.min) {\r\n\t\t\tthis.min = val;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nStatData.prototype.getStats = function() {\r\n\treturn {\r\n\t\tmean: this.count === 0 ? 0 : this.sum / this.count,\r\n\t\tmax: this.max,\r\n\t\tmin: this.min,\r\n\t\tsum: this.sum,\r\n\t\tcount: this.count\r\n\t}\r\n}\r\n\r\nmodule.exports = StatData;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/NetworkTimings.js":"var BaseMetrics = require('./BaseMetrics'),\r\n\thelpers = require('../helpers');\r\n\r\nfunction NetworkTimings() {\r\n\tBaseMetrics.apply(this, arguments);\r\n}\r\nrequire('util').inherits(NetworkTimings, BaseMetrics);\r\n\r\nNetworkTimings.prototype.id = 'NetworkTimings';\r\nNetworkTimings.prototype.probes = ['NavTimingProbe'];\r\n\r\nNetworkTimings.prototype.onData = function(data) {\r\n\tthis.timing = data;\r\n}\r\n\r\nNetworkTimings.prototype.getResults = function(cfg, browser) {\r\n\r\n\t// More useful representation of timing information\r\n\t// Credit : https://github.com/addyosmani/timing.js\r\n\tthis.addMetric('loadTime', 'loadEventEnd', 'fetchStart');\r\n\tthis.addMetric('domReadyTime', 'domComplete', 'domInteractive');\r\n\tthis.addMetric('readyStart', 'fetchStart', 'navigationStart');\r\n\tthis.addMetric('redirectTime', 'redirectEnd', 'redirectStart');\r\n\tthis.addMetric('appcacheTime', 'domainLookupStart', 'fetchStart');\r\n\tthis.addMetric('unloadEventTime', 'unloadEventEnd', 'unloadEventStart');\r\n\tthis.addMetric('domainLookupTime', 'domainLookupEnd', 'domainLookupStart');\r\n\tthis.addMetric('connectTime', 'connectEnd', 'connectStart');\r\n\tthis.addMetric('requestTime', 'responseEnd', 'requestStart');\r\n\tthis.addMetric('initDomTreeTime', 'domInteractive', 'responseEnd');\r\n\tthis.addMetric('loadEventTime', 'loadEventEnd', 'loadEventStart');\r\n\r\n\treturn this.timing;\r\n}\r\n\r\nNetworkTimings.prototype.addMetric = function(prop, a, b) {\r\n\tif (typeof this.timing[a] === 'number' && typeof this.timing[b] === 'number') {\r\n\t\tthis.timing[prop] = this.timing[a] - this.timing[b];\r\n\t}\r\n}\r\n\r\nmodule.exports = NetworkTimings;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/RafRenderingStats.js":"var BaseMetrics = require('./BaseMetrics'),\r\n\tdebug = require('debug')('bp:metrics:RafRenderingStats'),\r\n\thelpers = require('../helpers');\r\n\r\nfunction RafBenchmarkingRenderingStats() {\r\n\tBaseMetrics.apply(this, arguments);\r\n}\r\nrequire('util').inherits(RafBenchmarkingRenderingStats, BaseMetrics);\r\n\r\nRafBenchmarkingRenderingStats.prototype.id = 'RafBenchmarkingRenderingStats';\r\nRafBenchmarkingRenderingStats.prototype.probes = ['RafBenchmarkingProbe'];\r\n\r\nRafBenchmarkingRenderingStats.prototype.getResults = function() {\r\n\tif (this.__data.length > 0) {\r\n\t\tvar meanFrameTime = this.getMeanFrameTime_(this.__data[0]);\r\n\t\treturn {\r\n\t\t\tnumAnimationFrames: this.__data[0].length - 1,\r\n\t\t\tnumFramesSentToScreen: this.__data[0].length - 1,\r\n\t\t\tdroppedFrameCount: this.getDroppedFrameCount_(this.__data[0]),\r\n\t\t\tmeanFrameTime_raf: meanFrameTime,\r\n\t\t\tframesPerSec_raf: 1000 / meanFrameTime\r\n\t\t};\r\n\t} else {\r\n\t\tdebug('Did not get enough data to calculate metrics');\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\nRafBenchmarkingRenderingStats.prototype.getMeanFrameTime_ = function(frameTimes) {\r\n\tvar num_frames_sent_to_screen = frameTimes.length;\r\n\tvar mean_frame_time_seconds = (frameTimes[frameTimes.length - 1] - frameTimes[0]) / num_frames_sent_to_screen;\r\n\treturn mean_frame_time_seconds;\r\n}\r\n\r\nRafBenchmarkingRenderingStats.prototype.getDroppedFrameCount_ = function(frameTimes) {\r\n\tvar droppedFrameCount = 0;\r\n\tvar droppedFrameThreshold = 1000 / 55;\r\n\tfor (var i = 1; i < frameTimes.length; i++) {\r\n\t\tvar frameTime = frameTimes[i] - frameTimes[i - 1];\r\n\t\tif (frameTime > droppedFrameThreshold)\r\n\t\t\tdroppedFrameCount += Math.floor(frameTime / droppedFrameThreshold);\r\n\t}\r\n\treturn droppedFrameCount;\r\n};\r\n\r\nmodule.exports = RafBenchmarkingRenderingStats;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/SampleMetric.js":"var Q = require('q'),\r\n\tdebug = require('debug')('bp:metrics:SampleMetrics'),\r\n\tBaseMetrics = require('./BaseMetrics');\r\n\r\nfunction SampleMetrics(probes) {\r\n\tBaseMetrics.apply(this, [{\r\n\t\tprobes: probes\r\n\t}]);\r\n}\r\nrequire('util').inherits(SampleMetrics, BaseMetrics);\r\n\r\nSampleMetrics.prototype.id = 'SampleMetrics';\r\nSampleMetrics.prototype.probes = ['SampleProbe'];\r\n\r\nSampleMetrics.prototype.setup = function() {\r\n\tdebug('Setup Method called');\r\n\treturn Q.delay(1);\r\n}\r\n\r\nSampleMetrics.prototype.start = function() {\r\n\tdebug('Start Method called');\r\n\treturn Q.delay(1);\r\n}\r\n\r\nSampleMetrics.prototype.teardown = function() {\r\n\tdebug('Teardown Method called');\r\n\treturn Q.delay(1);\r\n}\r\n\r\nSampleMetrics.prototype.onData = function() {\r\n\tdebug('onData Method called');\r\n}\r\n\r\nSampleMetrics.prototype.onError = function() {\r\n\tdebug('onError Method called');\r\n}\r\n\r\nSampleMetrics.prototype.getResults = function() {\r\n\tdebug('Get Results called');\r\n\treturn {};\r\n}\r\n\r\nmodule.exports = SampleMetrics;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/TimelineMetrics.js":"var Q = require('q'),\n    helpers = require('./../helpers'),\n    RuntimePerfMetrics = require('./util/RuntimePerfMetrics'),\n    BaseMetrics = require('./BaseMetrics'),\n    StatData = require('./util/StatData'),\n    debug = require('debug')('bp:metrics:TimelineMetrics');\n\nfunction TimelineMetrics() {\n    this.timelineMetrics = {};\n    this.runtimePerfMetrics = new RuntimePerfMetrics();\n    this.eventStacks = {};\n\n    BaseMetrics.apply(this, arguments);\n}\n\nrequire('util').inherits(TimelineMetrics, BaseMetrics);\n\nTimelineMetrics.prototype.id = 'TimelineMetrics';\nTimelineMetrics.prototype.probes = ['PerfLogProbe', 'AndroidTracingProbe'];\n\nvar TRACE_CATEGORIES = ['blink.console', 'devtools.timeline', 'disabled-by-default-devtools.timeline', 'toplevel', 'disabled-by-default-devtools.timeline.frame'];\nvar eventCategoryRegEx = new RegExp('\\\\b(' + TRACE_CATEGORIES.join('|') + '|__metadata)\\\\b');\n\nTimelineMetrics.prototype.setup = function(cfg) {\n    cfg.browsers = cfg.browsers.map(function(browser) {\n        helpers.extend(browser, {\n            chromeOptions: {\n                perfLoggingPrefs: {}\n            }\n        });\n\n        if (helpers.deepEquals(browser, 'browserName', 'chrome') ||\n            (helpers.deepEquals(browser, 'browserName', 'android') && !helpers.deepEquals(browser, 'chromeOptions.androidPackage', 'com.android.chrome'))) {\n            // Only add this for Chrome OR Android-hybrid, not for Android-Chrome\n            browser.chromeOptions.perfLoggingPrefs.traceCategories = [\n                browser.chromeOptions.perfLoggingPrefs.traceCategories || '',\n                TRACE_CATEGORIES\n            ].join();\n        }\n        return browser;\n    });\n    return Q(cfg);\n};\n\n\nTimelineMetrics.prototype.getResults = function() {\n    var res = {};\n\n    for (var key in this.timelineMetrics) {\n        var stats = this.timelineMetrics[key].getStats();\n        if (stats.sum === 0) {\n            res[key] = stats.count;\n        } else {\n            res[key] = stats.sum;\n            res[key + '_avg'] = stats.mean;\n            res[key + '_max'] = stats.max;\n            res[key + '_count'] = stats.count;\n        }\n    }\n\n    helpers.extend(res, this.runtimePerfMetrics.getResults());\n\n    return this.addAggregates_(res);\n};\n\nTimelineMetrics.prototype.addAggregates_ = function(res) {\n    var metrics = {\n        'Styles': ['UpdateLayoutTree', 'RecalculateStyles', 'ParseAuthorStyleSheet'],\n        'Javascript': ['FunctionCall', 'GCEvent', 'MajorGC', 'MinorGC', 'EvaluateScript']\n    }\n    for (var key in metrics) {\n        res[key] = metrics[key].reduce(function(prev, cur, i) {\n            return prev + (typeof res[cur] === 'number' ? res[cur] : 0);\n        }, 0);\n    }\n    return res\n}\n\n// Data from Safari/Appium (old format)\nTimelineMetrics.prototype.processTimelineRecord_ = function(e) {\n    this.addData_(e, 'timeline');\n\n    if (Array.isArray(e.children)) {\n        e.children.forEach(this.processTimelineRecord_.bind(this));\n    }\n};\n\n// Timeline format at https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/edit#heading=h.yr4qxyxotyw\nTimelineMetrics.prototype.processTracingRecord_ = function(e) {\n    switch (e.ph) {\n        case 'I': // Instant Event\n        case 'X': // Duration Event\n            var duration = e.dur || e.tdur || 0;\n            this.addData_({\n                type: e.name,\n                data: e.args ? e.args.data : {},\n                startTime: e.ts / 1000,\n                endTime: (e.ts + duration) / 1000\n            }, 'tracing');\n            break;\n        case 'B': // Begin Event\n            if (typeof this.eventStacks[e.tid] === 'undefined') {\n                this.eventStacks[e.tid] = [];\n            }\n            this.eventStacks[e.tid].push(e);\n            break;\n        case 'E': // End Event\n            if (typeof this.eventStacks[e.tid] === 'undefined' || this.eventStacks[e.tid].length === 0) {\n                debug('Encountered an end event that did not have a start event', e);\n            } else {\n                var b = this.eventStacks[e.tid].pop();\n                if (b.name !== e.name) {\n                    debug('Start and end events dont have the same name', e, b);\n                }\n                this.addData_({\n                    type: e.name,\n                    data: helpers.extend(e.args.endData, b.args.beginData),\n                    startTime: b.ts / 1000,\n                    endTime: e.ts / 1000\n                }, 'tracing');\n            }\n            break;\n    }\n};\n\nTimelineMetrics.prototype.addData_ = function(e, source) {\n    if (typeof this.timelineMetrics[e.type] === 'undefined') {\n        this.timelineMetrics[e.type] = new StatData();\n    }\n    this.timelineMetrics[e.type].add(e.startTime && e.endTime ? e.endTime - e.startTime : 0);\n    this.runtimePerfMetrics.processRecord(e, source);\n}\n\nTimelineMetrics.prototype.onData = function(data) {\n    if (data.type === 'perfLog') {\n        var msg = data.value;\n        if (msg.method === 'Timeline.eventRecorded') {\n            this.processTimelineRecord_(msg.params);\n        } else if (msg.method === 'Tracing.dataCollected') {\n            if (eventCategoryRegEx.test(msg.params.cat)) {\n                this.processTracingRecord_(msg.params);\n            }\n        }\n    } else if (data.type === 'androidTracing') {\n        msg = data.value;\n        if (eventCategoryRegEx.test(msg.cat)) {\n            this.processTracingRecord_(msg);\n        }\n    }\n};\n\nmodule.exports = TimelineMetrics;\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/metrics/util/RuntimePerfMetrics.js":"// Test based on rules from http://calendar.perfplanet.com/2013/the-runtime-performance-checklist/\nvar StatData = require('./StatData');\n\nfunction RuntimePerfMetrics() {\n    this.paintArea = new StatData();\n    this.nodesPerLayout = new StatData();\n    this.DirtyNodesPerLayout = new StatData();\n    this.layers = {};\n    this.expensivePaints = 0;\n    this.expensiveEventHandlers = 0;\n    this.styles = 0;\n\n    this.hasData = false;\n    this.eventDispatchFn = null; // To check if FunctionCall follows EventDispatch events\n\n    this.frames = [];\n}\n\n\nRuntimePerfMetrics.prototype.id = 'RuntimePerfMetrics';\n\nRuntimePerfMetrics.prototype.processRecord = function(record, source) {\n    // If eventDispatch is ticking and this is not a FunctionCall, restart the ticks\n    if (source === 'tracing' && this.eventDispatchFn !== null && record.type !== 'FunctionCall') {\n        if (this.eventDispatchFn > 16) {\n            this.expensiveEventHandlers++;\n        }\n        this.eventDispatchFn = null;\n    }\n\n    if (typeof rules[record.type] === 'function') {\n        this.hasData = true;\n        rules[record.type].apply(this, [record, source]);\n    }\n};\n\nvar rules = {\n    DrawFrame: function(event) {\n        this.frames.push(event.startTime);\n    },\n    EventDispatch: function(event) {\n        var fnCallTime = 0;\n        this.eventDispatchFn = 0; // start ticking eventDispatchFn \n        if (Array.isArray(event.children)) {\n            event.children.forEach(function(event) {\n                if (event.type === 'FunctionCall') {\n                    fnCallTime += event.endTime - event.startTime;\n                }\n            });\n        }\n        if (fnCallTime > 16) {\n            this.expensiveEventHandlers++;\n        }\n    },\n    FunctionCall: function(event, source) {\n        if (source === 'tracing' && this.eventDispatchFn !== null) {\n            // Looks like a function call after eventDispatch since eventDispatchFn is ticking\n            this.eventDispatchFn += (event.endTime - event.startTime);\n        }\n    },\n    Layout: function(event) {\n        this.nodesPerLayout.add(event.data.totalObjects);\n        this.DirtyNodesPerLayout.add(event.data.dirtyObjects);\n    },\n    Paint: function(event) {\n        if (event.endTime - event.startTime > 16) {\n            // This paint took more than 1/60 ms or 16 ms\n            this.expensivePaints++;\n        }\n        this.layers[event.data.layerId] = true;\n        var clip = event.data.clip;\n        this.paintArea.add(Math.abs((clip[0] - clip[3]) * (clip[1] - clip[7])));\n    }\n}\n\nfunction getFrameRate(frames) {\n    frames.sort();\n    var range = 0.20;\n    var start = parseInt(frames.length * range, 10);\n    var end = parseInt(frames.length * (1 - range), 10);\n    return (1000 * (end - start)) / (frames[end] - frames[start]);\n}\n\nRuntimePerfMetrics.prototype.getResults = function() {\n    if (this.eventDispatchFn !== null) {\n        // Last event on the chain is a Function call, so draining it\n        this.processRecord({}, 'tracing');\n    }\n\n    var paintAreaStat = this.paintArea.getStats();\n    if (this.hasData) {\n        return {\n            'Layers': Object.keys(this.layers).length,\n            'PaintedArea_total': paintAreaStat.sum,\n            'PaintedArea_avg': paintAreaStat.mean,\n            'NodePerLayout_avg': this.nodesPerLayout.getStats().mean,\n            'ExpensivePaints': this.expensivePaints,\n            'ExpensiveEventHandlers': this.expensiveEventHandlers,\n            'framesPerSec (devtools)': getFrameRate(this.frames)\n        }\n    } else {\n        return {};\n    }\n}\n\nmodule.exports = RuntimePerfMetrics;\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/AndroidTracingProbe.js":"var Q = require('q'),\n\tfs = require('fs'),\n\tutil = require('util'),\n\tdebug = require('debug')('bp:probes:AndroidTracingProbe'),\n\tevents = require('events'),\n\thelpers = require('../helpers'),\n\tchildProcess = require('child_process'),\n\tbyline = require('byline');\n\nfunction AndroidTracingProbe(id) {\n\tif (id) {\n\t\tthis.id = id;\n\t}\n\tdebug('Initialize');\n\tevents.EventEmitter.call(this);\n}\n\nutil.inherits(AndroidTracingProbe, events.EventEmitter);\n\nAndroidTracingProbe.prototype.id = 'AndroidTracingProbe';\n\nAndroidTracingProbe.prototype.isEnabled = function(browser) {\n\t// TRUE for Android Chrome browser - Activity Name is always set for Android-Chrome browser\n\tif (helpers.deepEquals(browser, 'browserName', 'android') && helpers.deepEquals(browser, 'chromeOptions.androidPackage', 'com.android.chrome')) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nAndroidTracingProbe.prototype.setup = function(cfg) {\n\tvar me = this;\n\tvar enabled = false;\n\tthis.debugBrowser = cfg.debugBrowser;\n\tcfg.browsers.forEach(function(browser) {\n\t\tenabled = me.isEnabled(browser);\n\t});\n\tif (enabled) {\n\t\tdebug('Setting up android tracing');\n\t\treturn this.run_('adb server start').fin(function() {\n\t\t\treturn me.run_('adb logcat -c');\n\t\t});\n\t}\n};\n\nvar lifeCycle = function(methodName) {\n\treturn function(browser, browserConfig) {\n\t\tvar me = this;\n\t\tif (me.isEnabled(browserConfig)) {\n\t\t\treturn me[methodName](browser);\n\t\t}\n\t};\n}\n\nAndroidTracingProbe.prototype.start = lifeCycle('startRecordingTrace_');\nAndroidTracingProbe.prototype.teardown = lifeCycle('stopRecordingTrace_');\n\nAndroidTracingProbe.prototype.startRecordingTrace_ = function(browser) {\n\tvar me = this,\n\t\tquery = 'Logging performance trace to file';\n\n\tdebug('Starting android tracing');\n\treturn me.run_('adb shell pm grant com.android.chrome android.permission.WRITE_EXTERNAL_STORAGE').then(function(){\n\t\tme.run_('adb shell pm grant com.android.chrome android.permission.READ_EXTERNAL_STORAGE')\n\t}).then(function(){\n\t\treturn me.run_('adb shell \\'am broadcast -a com.android.chrome.GPU_PROFILER_START -e continuous \"\" -e categories \"benchmark,disabled-by-default-devtools.timeline,toplevel,disabled-by-default-devtools.timeline.frame\"\\'')\n\t}).then(function() {\n\t\treturn me.waitForLogCat_(query);\n\t}).then(function(line) {\n\t\tdebug(line);\n\t});\n};\n\nAndroidTracingProbe.prototype.stopRecordingTrace_ = function(browser) {\n\tvar me = this,\n\t\tquery = 'Profiler finished. Results are in ';\n\n\tdebug('Tearing down android tracing');\n\n\treturn this.run_('adb shell \\'am broadcast -a com.android.chrome.GPU_PROFILER_STOP\\'').then(function() {\n\t\treturn me.waitForLogCat_(query)\n\t}).then(function(line) {\n\t\ttry {\n\t\t\treturn me.pullLogs_(line.split(query)[1].slice(0, -1));\n\t\t} catch (e) {\n\t\t\tdebug(e);\n\t\t\treturn Q();\n\t\t}\n\t}).then(function(dataStream) {\n\t\tif (dataStream) {\n\t\t\t// Format is {traceEvents: [{pid:...,cat:...}]}\n\t\t\tdataStream.forEach(function(data) {\n\t\t\t\tme.emit('data', {\n\t\t\t\t\ttype: 'androidTracing',\n\t\t\t\t\tvalue: data\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tdebug('Read all data');\n\t});\n};\n\nAndroidTracingProbe.prototype.run_ = function(commandString) {\n\tdebug('$ ' + commandString);\n\tvar deferred = Q.defer();\n\tvar process = childProcess.exec(commandString, {\n\t\ttimeout: 1000 * 60 * 2\n\t}, function() {\n\t\tdeferred.resolve();\n\t});\n\n\treturn deferred.promise;\n};\n\nAndroidTracingProbe.prototype.waitForLogCat_ = function(query, timeout) {\n\tvar deferred = Q.defer(),\n\t\tline = '',\n\t\tcommandString = \"adb logcat\",\n\t\tsearch = new RegExp(query, \"i\");\n\n\ttimeout = timeout || 1000 * 60 * 2;\n\tvar command = commandString.split(/\\s/);\n\tvar logcat = childProcess.spawn(command[0], command.slice(1));\n\tstream = byline.createStream(logcat.stdout);\n\n\tvar timerHandle = setTimeout(function() {\n\t\tdone(false);\n\t}, timeout);\n\n\tstream.on('data', function(data) {\n\t\tvar line = data.toString();\n\t\t//debug('> ', line);\n\t\tif (line.match(search)) {\n\t\t\tdone(line);\n\t\t}\n\t});\n\n\tvar completed = false;\n\n\tfunction done(arg) {\n\t\tif (timerHandle) {\n\t\t\tclearTimeout(timerHandle);\n\t\t}\n\t\tif (!completed) {\n\t\t\tcompleted = true;\n\t\t\tif (arg) {\n\t\t\t\tdeferred.resolve(arg);\n\t\t\t} else {\n\t\t\t\tdeferred.reject();\n\t\t\t}\n\t\t}\n\t\tlogcat.kill();\n\t}\n\n\treturn deferred.promise;\n};\n\nAndroidTracingProbe.prototype.pullLogs_ = function(filename) {\n\tvar me = this,\n\t\tpath = require('path'),\n\t\tfile = path.basename(filename);\n\n\treturn me.run_(['adb pull', filename.replace('/storage/emulated/0/', '/sdcard/'), file].join(' ')).then(function() {\n\t\t// TODO Convert this to streams\n\t\tvar trace = JSON.parse(fs.readFileSync(file));\n\t\tif (!me.debugBrowser) {\n\t\t\tfs.unlinkSync(file);\n\t\t}\n\t\treturn trace.traceEvents;\n\t});\n};\n\nmodule.exports = AndroidTracingProbe;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/NavTimingProbe.js":"var Q = require('q'),\r\n\tutil = require('util'),\r\n\twd = require('wd'),\r\n\tevents = require('events'),\r\n\thelpers = require('../helpers');\r\n\r\nfunction NavTimingProbe() {\r\n\tevents.EventEmitter.call(this);\r\n}\r\n\r\nutil.inherits(NavTimingProbe, events.EventEmitter);\r\n\r\nNavTimingProbe.prototype.id = 'NavTimingProbe';\r\n\r\nNavTimingProbe.prototype.teardown = function(browser) {\r\n\tvar code = function() {\r\n\t\tvar requestAnimationFrame = (function() {\r\n\t\t\treturn window.requestAnimationFrame ||\r\n\t\t\t\twindow.webkitRequestAnimationFrame ||\r\n\t\t\t\twindow.mozRequestAnimationFrame ||\r\n\t\t\t\twindow.oRequestAnimationFrame ||\r\n\t\t\t\twindow.msRequestAnimationFrame ||\r\n\t\t\t\tfunction(callback) {\r\n\t\t\t\t\twindow.setTimeout(callback, 1000 / 60);\r\n\t\t\t\t};\r\n\t\t})().bind(window);\r\n\r\n\t\trequestAnimationFrame(function() {\r\n\t\t\tvar result = {};\r\n\t\t\tvar performance = window.performance || window.webkitPerformance || window.msPerformance || window.mozPerformance;\r\n\t\t\tif (typeof performance !== 'undefined') {\r\n\t\t\t\tvar data = performance.timing;\r\n\t\t\t\tfor (var key in data) {\r\n\t\t\t\t\tif (typeof data[key] === 'number') // Firefox spits out a toJSON function also\r\n\t\t\t\t\t\tresult[key] = data[key];\r\n\t\t\t\t}\r\n\t\t\t\tif (window.chrome && window.chrome.loadTimes) { // Chrome\r\n\t\t\t\t\tresult.firstPaint = (window.chrome.loadTimes().firstPaintTime - window.chrome.loadTimes().startLoadTime) * 1000;\r\n\t\t\t\t} else if (typeof window.performance.timing.msFirstPaint === 'number') { // IE\r\n\t\t\t\t\tresult.firstPaint = data.msFirstPaint - data.navigationStart;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twindow.__navTimings = result;\r\n\t\t});\r\n\t};\r\n\r\n\tvar me = this;\r\n\treturn browser.execute(helpers.fnCall(code)).then(function() {\r\n\t\treturn browser.waitFor({\r\n\t\t\tasserter: wd.asserters.jsCondition('(typeof window.__navTimings !== \"undefined\")', false),\r\n\t\t\ttimeout: 1000 * 60 * 10,\r\n\t\t\tpollFreq: 1000\r\n\t\t});\r\n\t}).then(function(res) {\r\n\t\treturn browser.eval('window.__navTimings');\r\n\t}).then(function(res) {\r\n\t\tme.emit('data', res);\r\n\t});\r\n};\r\nmodule.exports = NavTimingProbe;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/NetworkResourcesProbe.js":"var Q = require('q'),\r\n    util = require('util'),\r\n    wd = require('wd'),\r\n    events = require('events'),\r\n    helpers = require('../helpers');\r\n\r\n/**\r\n * Network resources timing Probe\r\n *\r\n * @see http://www.w3.org/TR/resource-timing/\r\n * @constructor\r\n */\r\nfunction NetworkResourcesProbe() {\r\n\r\n    /**\r\n     * \"outputRawData\" config option to decide whether or not Metric should return raw data\r\n     *\r\n     * \"resultsBeforeStart\" window.performance.getEntries() track all resources, even before browser-perf is started.\r\n     * With this option, metric could return all (\"true\") results or only between Probe \"start\" and \"teardown\" (\"false\")\r\n     *\r\n     * @type {{outputRawData: boolean, resultsBeforeStart: boolean}}\r\n     */\r\n    this.defaultOptions = {\r\n        'outputRawData' : false,\r\n        'resultsBeforeStart' : false\r\n    };\r\n\r\n    this.lastResourceTime = 0;\r\n\r\n    events.EventEmitter.call(this);\r\n}\r\n\r\nutil.inherits(NetworkResourcesProbe, events.EventEmitter);\r\n\r\nNetworkResourcesProbe.prototype.id = 'NetworkResourcesProbe';\r\n\r\n/**\r\n * Client-side script that need to be executed\r\n * inside browser to get Network Resources statistics\r\n *\r\n * @private\r\n */\r\nNetworkResourcesProbe.prototype._clientGetData = function() {\r\n    window.__networkResources = (window.performance && typeof window.performance.getEntries == 'function')\r\n        ? window.performance.getEntries()\r\n        : [];\r\n};\r\n\r\nNetworkResourcesProbe.prototype.setup = function(config) {\r\n    var options = config.metricOptions['NetworkResources'] || {};\r\n    this.options = helpers.extend(this.defaultOptions, options);\r\n};\r\n\r\n/**\r\n * Called on metrics.stats\r\n *\r\n * @param browser\r\n */\r\nNetworkResourcesProbe.prototype.start = function(browser) {\r\n    var me = this;\r\n\r\n    // Execute window.performance.getEntries() to get resources\r\n    // that were before fetched before browser-perf metrics started\r\n    // and calculate last loaded resource\r\n    browser.execute(helpers.fnCall(this._clientGetData))\r\n        .then(function() {\r\n            return browser.eval('window.__networkResources')\r\n        })\r\n        .then(function(res) {\r\n            me.beforeData = res;\r\n\r\n            // If \"resultsBeforeStart\" option is false and there are any information\r\n            if (!me.options.resultsBeforeStart &&  me.beforeData && me.beforeData.length > 0) {\r\n                var resourceTimes = me.beforeData.map(function(networkResource, idx) { return networkResource.responseEnd; });\r\n                me.lastResourceTime = Math.max.apply(null, resourceTimes);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Called on metrics.teardown\r\n *\r\n * @param browser\r\n * @returns {*}\r\n */\r\nNetworkResourcesProbe.prototype.teardown = function(browser) {\r\n    var me = this;\r\n    return browser.execute(helpers.fnCall(this._clientGetData))\r\n        .then(function() {\r\n            return browser.eval('window.__networkResources')\r\n        })\r\n        .then(function(res) {\r\n            // filter results to starts with this.lastResourceTime\r\n            return res.filter(function(element) {\r\n                return element['startTime'] >= me.lastResourceTime\r\n            });\r\n        })\r\n        .then(function(res) {\r\n            me.emit('data', res);\r\n        });\r\n};\r\nmodule.exports = NetworkResourcesProbe;\r\n","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/PerfLogProbe.js":"var util = require('util'),\r\n\tUrl = require('url'),\r\n\tevents = require('events'),\r\n\tQ = require('q'),\r\n\trequest = require('request'),\r\n\tJSONStream = require('JSONStream'),\r\n\teventStream = require('event-stream'),\r\n\thelpers = require('../helpers'),\r\n\tdebug = require('debug')('bp:probes:PerfLogProbe');\r\n\r\nfunction PerfLogProbe() {\r\n\tevents.EventEmitter.call(this);\r\n}\r\n\r\nutil.inherits(PerfLogProbe, events.EventEmitter);\r\n\r\nPerfLogProbe.prototype.id = 'PerfLogProbe';\r\n\r\nPerfLogProbe.prototype.setup = function(cfg) {\r\n\tvar me = this;\r\n\tcfg.browsers = cfg.browsers.map(function(browser) {\r\n\t\thelpers.extend(browser, {\r\n\t\t\tloggingPrefs: {\r\n\t\t\t\tperformance: 'ALL'\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn browser;\r\n\t});\r\n\treturn Q(cfg);\r\n};\r\n\r\nPerfLogProbe.prototype.start = function(browser) {\r\n\tvar me = this;\r\n\treturn browser.logTypes().then(function(logs) {\r\n\t\tdebug('Supported log types', logs);\r\n\t\tme.enabled = (logs.indexOf('performance') !== -1);\r\n\t}).then(function() {\r\n\t\tif (me.enabled) {\r\n\t\t\treturn browser.log('performance');\r\n\t\t}\r\n\t});\r\n};\r\n\r\nPerfLogProbe.prototype.teardown = function(browser) {\r\n\tvar me = this;\r\n\tif (this.enabled) {\r\n\t\treturn Q.promise(function(resolve, reject, notify) {\r\n\t\t\tvar url = [\r\n\t\t\t\tbrowser.configUrl.href,\r\n\t\t\t\tbrowser.configUrl.href.match(/\\/$/) ? '' : '/', // making sure the last part of the path doesn't get stripped\r\n\t\t\t\t'session/',\r\n\t\t\t\tbrowser.sessionID,\r\n\t\t\t\t'/log'\r\n\t\t\t].join('');\r\n\r\n\t\t\tdebug('Getting Performance log', Url.format(url));\r\n\t\t\tvar logStream = request({\r\n\t\t\t\turl: url,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tjson: {\r\n\t\t\t\t\ttype: 'performance'\r\n\t\t\t\t}\r\n\t\t\t}).on('error', reject);\r\n\r\n\t\t\t//logStream.pipe(require('fs').createWriteStream('_perflog.json'));\r\n\r\n\t\t\tlogStream.pipe(JSONStream.parse('value.*')).on('error', reject)\r\n\t\t\t\t.pipe(eventStream.map(function(data, cb) {\r\n\t\t\t\t\tif (typeof data.message !== 'undefined') {\r\n\t\t\t\t\t\t// ChromeDriver - format: message: \"[{method:'Tracing.dataCollected', params:{cat:...,pid:...}}]\"\r\n\t\t\t\t\t\tcb(null, JSON.parse(data.message).message);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Appium - format: [{startTime:..., name:..., endTime:...}]\r\n\t\t\t\t\t\tcb(null, {\r\n\t\t\t\t\t\t\tmethod: 'Timeline.eventRecorded',\r\n\t\t\t\t\t\t\tparams: data\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t})).on('data', function(data) {\r\n\t\t\t\t\tme.emit('data', {\r\n\t\t\t\t\t\ttype: 'perfLog',\r\n\t\t\t\t\t\tvalue: data\r\n\t\t\t\t\t});\r\n\t\t\t\t}).on('error', reject).on('end', resolve);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nmodule.exports = PerfLogProbe;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/RafBenchmarkingProbe.js":"var Q = require('q'),\r\n\tutil = require('util'),\r\n\tevents = require('events'),\r\n\thelpers = require('../helpers'),\r\n\tdebug = require('debug')('bp:probes:RafBenchmarkingProbe');\r\n\r\nfunction RafBenchmarkingProbe() {\r\n\tevents.EventEmitter.call(this);\r\n}\r\n\r\nutil.inherits(RafBenchmarkingProbe, events.EventEmitter);\r\n\r\nRafBenchmarkingProbe.prototype.id = 'RafBenchmarkingProbe';\r\n\r\nRafBenchmarkingProbe.prototype.start = function(browser) {\r\n\tvar code = function() {\r\n\t\tvar getTimeMs = (function() {\r\n\t\t\tif (window.performance)\r\n\t\t\t\treturn (performance.now ||\r\n\t\t\t\t\tperformance.mozNow ||\r\n\t\t\t\t\tperformance.msNow ||\r\n\t\t\t\t\tperformance.oNow ||\r\n\t\t\t\t\tperformance.webkitNow).bind(window.performance);\r\n\t\t\telse\r\n\t\t\t\treturn function() {\r\n\t\t\t\t\treturn new Date().getTime();\r\n\t\t\t\t};\r\n\t\t})();\r\n\r\n\t\tvar requestAnimationFrame = (function() {\r\n\t\t\treturn window.requestAnimationFrame ||\r\n\t\t\t\twindow.webkitRequestAnimationFrame ||\r\n\t\t\t\twindow.mozRequestAnimationFrame ||\r\n\t\t\t\twindow.oRequestAnimationFrame ||\r\n\t\t\t\twindow.msRequestAnimationFrame ||\r\n\t\t\t\tfunction(callback) {\r\n\t\t\t\t\twindow.setTimeout(callback, 1000 / 60);\r\n\t\t\t};\r\n\t\t})().bind(window);\r\n\r\n\t\twindow.__RafRecorder = {\r\n\t\t\tframes: [],\r\n\t\t\tflush: true,\r\n\t\t\trecord: function(timeStamp) {\r\n\t\t\t\tif (__RafRecorder.flush) {\r\n\t\t\t\t\t__RafRecorder.frames = [];\r\n\t\t\t\t\t__RafRecorder.flush = false;\r\n\t\t\t\t}\r\n\t\t\t\t__RafRecorder.frames.push(timeStamp);\r\n\t\t\t\trequestAnimationFrame(__RafRecorder.record);\r\n\t\t\t},\r\n\t\t\tget: function() {\r\n\t\t\t\t__RafRecorder.flush = true;\r\n\t\t\t\treturn __RafRecorder.frames;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trequestAnimationFrame(window.__RafRecorder.record);\r\n\r\n\t};\r\n\r\n\treturn browser.execute(helpers.fnCall(code));\r\n};\r\n\r\nRafBenchmarkingProbe.prototype.teardown = function(browser) {\r\n\tdebug('Clearing timer Interval');\r\n\tvar me = this;\r\n\treturn browser.eval('window.__RafRecorder.get()').then(function(res) {\r\n\t\tif (Array.isArray(res) && res.length > 0) {\r\n\t\t\tme.emit('data', res);\r\n\t\t}\r\n\t\tclearTimeout(me.timerHandle);\r\n\t}, function(err) {\r\n\t\tme.emit('error', err);\r\n\t\tclearTimeout(me.timerHandle);\r\n\t});\r\n};\r\n\r\nmodule.exports = RafBenchmarkingProbe;","/home/travis/build/npmtest/node-npmtest-browser-perf/node_modules/browser-perf/lib/probes/SampleProbe.js":"var Q = require('q'),\r\n\tutil = require('util'),\r\n\tevents = require('events'),\r\n\thelpers = require('../helpers'),\r\n\tdebug = require('debug')('bp:probes:SampleProbe');\r\n\r\nfunction SampleProbe(id) {\r\n\tif (id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\tdebug('Initialize');\r\n\tevents.EventEmitter.call(this);\r\n}\r\n\r\nutil.inherits(SampleProbe, events.EventEmitter);\r\n\r\nSampleProbe.prototype.id = 'SampleProbe';\r\n\r\nSampleProbe.prototype.setup = function(cfg) {\r\n\tdebug('Setup');\r\n\tthis.timerHandle = null;\r\n\treturn Q.delay(1);\r\n};\r\n\r\nSampleProbe.prototype.start = function(cfg, browser) {\r\n\tdebug('start');\r\n\tvar me = this;\r\n\tthis.timerHandle = setInterval(function() {\r\n\t\tdebug('Event fired');\r\n\t\tme.emit('data', {\r\n\t\t\ttime: new Date().getTime()\r\n\t\t});\r\n\t});\r\n\treturn Q.delay(1);\r\n};\r\n\r\nSampleProbe.prototype.teardown = function(cfg, browser) {\r\n\tdebug('teardown');\r\n\tclearInterval(this.timerHandle);\r\n\treturn Q.delay(1);\r\n};\r\n\r\nmodule.exports = SampleProbe;"}